{"ast":null,"code":"import { timeZomeData } from './timeZone';\nexport default {\n  name: 'App',\n\n  data() {\n    return {\n      fields: [{\n        key: 'city',\n        sortable: true\n      }, {\n        key: 'country',\n        sortable: false\n      }, {\n        key: 'timezone',\n        sortable: true\n      }, {\n        key: 'city_ascii',\n        sortable: false,\n        label: 'Action'\n      }],\n      cityName: '',\n      listOfCity: [],\n      filteredCity: []\n    };\n  },\n\n  methods: {\n    getTimeZoneViaCity() {\n      event.preventDefault();\n      this.filteredCity = timeZomeData.filter(item => {\n        if (item && item.city) {\n          return item.city.toLocaleLowerCase() === this.cityName.toLocaleLowerCase();\n        }\n      }) || [];\n    },\n\n    addToTable() {\n      if (this.filteredCity && this.filteredCity.length > 0) {\n        this.cityName = '';\n        const uniqueCities = [...this.listOfCity, ...this.filteredCity];\n        this.listOfCity = [...new Set(uniqueCities)];\n        this.filteredCity = [];\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqCA;AACA;EACAA,WADA;;EAEAC;IACA;MACAC,SACA;QACAC,WADA;QAEAC;MAFA,CADA,EAKA;QACAD,cADA;QAEAC;MAFA,CALA,EASA;QACAD,eADA;QAEAC;MAFA,CATA,EAaA;QACAD,iBADA;QAEAC,eAFA;QAGAC;MAHA,CAbA,CADA;MAoBAC,YApBA;MAqBAC,cArBA;MAsBAC;IAtBA;EAwBA,CA3BA;;EA4BAC;IACAC;MACAC;MACA,oBACAC;QACA;UACA;QACA;MACA,CAJA,KAIA,EALA;IAMA,CATA;;IAUAC;MACA;QACA;QACA;QACA;QACA;MACA;IACA;;EAjBA;AA5BA","names":["name","data","fields","key","sortable","label","cityName","listOfCity","filteredCity","methods","getTimeZoneViaCity","event","timeZomeData","addToTable"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <b-container>\n      <b-card class=\"text-center\">\n        <b-table sticky-header striped hover :items=\"listOfCity\" :fields=\"fields\">\n          <template #cell(city_ascii)=\"row\">\n            <b-button size=\"sm\" @click=\"listOfCity.splice(row.index, 1)\" class=\"mr-2\"> Delete</b-button>\n          </template>\n        </b-table>\n      </b-card>\n      <b-card class=\"text-center mt-3\">\n        <b-form inline @submit=\"getTimeZoneViaCity\">\n          <label class=\"sr-only\" for=\"inline-form-input-name\">City Name</label>\n          <b-form-input\n            id=\"inline-form-input-name\"\n            v-model=\"cityName\"\n            class=\"mb-2 mr-sm-2 mb-sm-0\"\n            placeholder=\"City Name\"\n          ></b-form-input>\n          <b-button variant=\"primary\" type=\"submit\">Search</b-button>\n        </b-form>\n      </b-card>\n      <b-card class=\"text-center\" v-show=\"filteredCity && filteredCity.length > 0\" title=\"Search Result..\">\n        <b-card-text>\n          <b-table sticky-header striped hover :items=\"filteredCity\" :fields=\"fields\">\n            <!-- <template #cell(city_ascii)=\"row\">\n            <b-button size=\"sm\" @click=\"filteredCity.splice(row.index, 1)\" class=\"mr-2\"> Delete</b-button>\n          </template> -->\n          </b-table>\n        </b-card-text>\n        <b-link @click=\"addToTable\" class=\"card-link\">Add to list</b-link>\n      </b-card>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { timeZomeData } from './timeZone';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      fields: [\n        {\n          key: 'city',\n          sortable: true,\n        },\n        {\n          key: 'country',\n          sortable: false,\n        },\n        {\n          key: 'timezone',\n          sortable: true,\n        },\n        {\n          key: 'city_ascii',\n          sortable: false,\n          label: 'Action',\n        },\n      ],\n      cityName: '',\n      listOfCity: [],\n      filteredCity: [],\n    };\n  },\n  methods: {\n    getTimeZoneViaCity() {\n      event.preventDefault();\n      this.filteredCity =\n        timeZomeData.filter((item) => {\n          if (item && item.city) {\n            return item.city.toLocaleLowerCase() === this.cityName.toLocaleLowerCase();\n          }\n        }) || [];\n    },\n    addToTable() {\n      if (this.filteredCity && this.filteredCity.length > 0) {\n        this.cityName = '';\n        const uniqueCities = [...this.listOfCity, ...this.filteredCity];\n        this.listOfCity = [...new Set(uniqueCities)];\n        this.filteredCity = [];\n      }\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}